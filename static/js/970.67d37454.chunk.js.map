{"version":3,"file":"static/js/970.67d37454.chunk.js","mappings":"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","sources":["redux/selectors.js","components/contacts/contactForm.jsx","components/contacts/editModal.jsx","components/contacts/contact.jsx","components/contacts/contactList.jsx","components/contacts/filter.jsx","pages/contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilterValue = state => state.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filters) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filters.value.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, editContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\nimport { Box, TextField, Button } from '@mui/material';\n\nexport const ContactForm = ({ currentContact, setModalClose }) => {\n  const [name, setName] = useState(currentContact ? currentContact.name : '');\n  const [number, setNumber] = useState(\n    currentContact ? currentContact.number : ''\n  );\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleChange = evt => {\n    const name = evt.target.name;\n    switch (name) {\n      case 'name':\n        setName(evt.target.value);\n        break;\n\n      case 'number':\n        setNumber(evt.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const contactName = evt.target.name.value;\n    const contactNumber = evt.target.number.value;\n    const contact = {\n      name: contactName,\n      number: contactNumber,\n    };\n    const checkName = contacts.find(el => el.name === contact.name);\n    !checkName\n      ? dispatch(addContact(contact))\n      : alert(` ${checkName.name} is already in contacts `);\n    reset();\n  };\n\n  const onHandleSubmit = evt => {\n    evt.preventDefault();\n    const contactName = evt.target.name.value;\n    const contactNumber = evt.target.number.value;\n    const contact = {\n      id: currentContact.id,\n      name: contactName,\n      number: contactNumber,\n    };\n    dispatch(editContact(contact));\n    setModalClose(false);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Box\n      id=\"contactForm\"\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': {\n          my: 2,\n          mx: 'auto',\n          width: '25ch',\n          display: 'block',\n        },\n        zIndex: 50,\n      }}\n      onSubmit={currentContact ? onHandleSubmit : handleSubmit}\n    >\n      <TextField\n        required\n        label=\"name\"\n        InputLabelProps={{\n          focused: true,\n        }}\n        name=\"name\"\n        value={name}\n        variant=\"filled\"\n        onChange={handleChange}\n        inputProps={{\n          pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n          title:\n            \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        }}\n      />\n      <TextField\n        required\n        label=\"number\"\n        InputLabelProps={{\n          focused: true,\n        }}\n        name=\"number\"\n        value={number}\n        variant=\"filled\"\n        onChange={handleChange}\n        inputProps={{\n          pattern: '^[+][0-9]{1,3}.[0-9]{4,14}(?:x.+)?$',\n          title:\n            'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n        }}\n      ></TextField>\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        sx={{ height: 25, display: 'flex', alignItems: 'center', mx: 'auto' }}\n      >\n        {currentContact ? 'Edit contact' : 'Add contact'}\n      </Button>\n    </Box>\n  );\n};\n","import * as React from 'react';\nimport { Box, Modal, IconButton } from '@mui/material';\nimport EditRoundedIcon from '@mui/icons-material/EditRounded';\nimport { ContactForm } from './contactForm';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport const EditContact = ({ contact }) => {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n      <IconButton\n        sx={{\n          height: 25,\n          width: 25,\n          backgroundColor: '#0288d1',\n          mr: 1,\n          color: 'white',\n          '&:hover': {\n            color: '#0288d1',\n          },\n          '& svg': {\n            fontSize: 15,\n          },\n        }}\n        onClick={handleOpen}\n      >\n        <EditRoundedIcon />\n      </IconButton>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <ContactForm currentContact={contact} setModalClose={setOpen} />\n        </Box>\n      </Modal>\n    </div>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { ListItem, ListItemText, Button } from '@mui/material';\nimport { EditContact } from './editModal';\n\nexport const Contact = ({ contactInfo }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ListItem sx={{ py: 0 }}>\n      <ListItemText\n        primaryTypographyProps={{\n          fontSize: 20,\n          fontWeight: 'medium',\n          letterSpacing: 0,\n          color: '#2d5cc2',\n        }}\n        primary={`${contactInfo.name}: ${contactInfo.number}`}\n      />\n      <EditContact contact={contactInfo} />\n      <Button\n        variant=\"contained\"\n        sx={{ height: 25, display: 'flex', alignItems: 'center' }}\n        onClick={() => dispatch(deleteContact(contactInfo.id))}\n      >\n        Delete\n      </Button>\n    </ListItem>\n  );\n};\n\nContact.propTypes = {\n  contactInfo: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { Contact } from './contact';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { List } from '@mui/material';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {visibleContacts.map(contact => {\n        return <Contact key={contact.id} contactInfo={contact} />;\n      })}\n    </List>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filtersSlice';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <TextField\n      type=\"text\"\n      label=\"Find contacts by name\"\n      InputLabelProps={{\n        focused: true,\n      }}\n      margin=\"normal\"\n      onChange={evt => dispatch(setFilter(evt.currentTarget.value))}\n    />\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/contacts/contactList';\nimport { ContactForm } from 'components/contacts/contactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/selectors';\nimport { Filter } from 'components/contacts/filter';\nimport { Container } from '@mui/material';\nimport { Box } from '@mui/system';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container maxWidth=\"sm\" sx={{ position: 'relative' }}>\n      <Box component=\"h1\" sx={{ color: '#42a5f5', textAlign: 'center' }}>\n        Your contacts\n      </Box>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filter","filters","contact","name","toLowerCase","includes","value","ContactForm","currentContact","setModalClose","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","evt","target","reset","Box","id","component","sx","my","mx","width","display","zIndex","onSubmit","preventDefault","contactName","contactNumber","editContact","checkName","find","el","alert","addContact","TextField","required","label","InputLabelProps","focused","variant","onChange","inputProps","pattern","title","Button","type","height","alignItems","style","position","top","left","transform","bgcolor","border","boxShadow","p","EditContact","React","open","setOpen","IconButton","backgroundColor","mr","color","fontSize","onClick","EditRounded","Modal","onClose","Contact","contactInfo","ListItem","py","ListItemText","primaryTypographyProps","fontWeight","letterSpacing","primary","deleteContact","ContactList","visibleContacts","List","map","Filter","margin","setFilter","currentTarget","Contacts","useEffect","fetchContacts","Container","maxWidth","textAlign"],"sourceRoot":""}